
-- Drop tables if they exist to avoid conflicts
drop table if exists student_prior_schools;
drop table if exists prior_schools;
drop table if exists reference_statements;
drop table if exists referees;
drop table if exists applications;
drop table if exists student_addresses;
drop table if exists students;


create table students (
    StudentID integer primary key,
    StudentName varchar(50)
);
-- The students table eliminates redundancy by storing each student only once (1NF).


create table student_addresses (
    StudentID integer,
    App_Year integer,
    Street varchar(100),
    State varchar(30),
    ZipCode varchar(7),
    primary key (StudentID, App_Year),
    foreign key (StudentID) references students(StudentID)
);
-- The student_addresses table ensures that address data is unique to each application year (2NF)


create table applications (
    App_No integer,
    App_Year integer,
    StudentID integer,
    primary key (App_No, App_Year),
    foreign key (StudentID) references students(StudentID)
);
-- The applications table handles applications per student and year, ensuring each application is uniquely identified (2NF)



create table referees (
    ReferenceName varchar(100),
    RefInstitution varchar(100),
    primary key (ReferenceName, RefInstitution)
);



create table reference_statements (
    App_No integer,
    App_Year integer,
    ReferenceName varchar(100),
    RefInstitution varchar(100),
    ReferenceStatement varchar(500),
    primary key (App_No, App_Year, ReferenceName, RefInstitution),
    foreign key (App_No, App_Year) references applications(App_No, App_Year),
    foreign key (ReferenceName, RefInstitution) references referees(ReferenceName, RefInstitution)
);
-- link referees with specific statements per application (3NF)


create table prior_schools (
    PriorSchoolId integer primary key,
    PriorSchoolAddr varchar(100)
);


create table student_prior_schools (
    StudentID integer,
    PriorSchoolId integer,
    GPA integer,
    primary key (StudentID, PriorSchoolId),
    foreign key (StudentID) references students(StudentID),
    foreign key (PriorSchoolId) references prior_schools(PriorSchoolId)
);
-- dependency on GPA and prior school information is removed (3NF)


insert into students (StudentID, StudentName) values (1, 'Mark');
insert into students (StudentID, StudentName) values (2, 'Sarah');
insert into students (StudentID, StudentName) values (3, 'Paul');
insert into students (StudentID, StudentName) values (4, 'Jack');
insert into students (StudentID, StudentName) values (5, 'Mary');
insert into students (StudentID, StudentName) values (6, 'Susan');


insert into student_addresses (StudentID, App_Year, Street, State, ZipCode) values (1, 2003, 'Grafton Street', 'New York', 'NY234');
insert into student_addresses (StudentID, App_Year, Street, State, ZipCode) values (2, 2010, 'Green Road', 'California', 'Cal123');
insert into student_addresses (StudentID, App_Year, Street, State, ZipCode) values (3, 2008, 'Yellow Park', 'Mexico', 'Mex1');


insert into applications (App_No, App_Year, StudentID) values (1, 2003, 1);
insert into applications (App_No, App_Year, StudentID) values (2, 2010, 2);
insert into applications (App_No, App_Year, StudentID) values (3, 2008, 3);


insert into referees (ReferenceName, RefInstitution) values ('Dr. Jones', 'Trinity College');
insert into referees (ReferenceName, RefInstitution) values ('Dr. Byrne', 'DIT');
insert into referees (ReferenceName, RefInstitution) values ('Prof. Cahill', 'UCC');


insert into reference_statements (App_No, App_Year, ReferenceName, RefInstitution, ReferenceStatement)
values (1, 2003, 'Dr. Jones', 'Trinity College', 'Good guy');


insert into prior_schools (PriorSchoolId, PriorSchoolAddr) values (1, 'Castleknock');
insert into prior_schools (PriorSchoolId, PriorSchoolAddr) values (3, 'St. Patrick');
insert into prior_schools (PriorSchoolId, PriorSchoolAddr) values (4, 'DBS');


insert into student_prior_schools (StudentID, PriorSchoolId, GPA) values (1, 1, 65);
insert into student_prior_schools (StudentID, PriorSchoolId, GPA) values (2, 3, 76);



select * from students;


select * from student_addresses;


select * from applications;


select * from referees;


select * from reference_statements;


select * from prior_schools;


select * from student_prior_schools;


select a.App_No, a.App_Year, s.StudentName, sa.Street, sa.State, sa.ZipCode
from applications a
join students s on a.StudentID = s.StudentID
join student_addresses sa on a.StudentID = sa.StudentID and a.App_Year = sa.App_Year;


select rs.App_No, rs.App_Year, r.ReferenceName, r.RefInstitution, rs.ReferenceStatement
from reference_statements rs
join referees r on rs.ReferenceName = r.ReferenceName and rs.RefInstitution = r.RefInstitution;


select s.StudentName, ps.PriorSchoolAddr, sps.GPA
from students s
join student_prior_schools sps on s.StudentID = sps.StudentID
join prior_schools ps on sps.PriorSchoolId = ps.PriorSchoolId;



