Data Communiations - Protocols
----------------------------------------------

A better model is required to explain the concepts and techniques of internetworking,
the one for regular networking won't cut it.

The purpose of each layer of protocol software is to provide one component of the overall
solution to the "Communications Problem".

These layers of software can exist on seperate hardware components and/or hosts, or in
som instances multiple layers can exist on a single one.

With networking software, the layers of software protocols are organised into a stack,
using services of lower layers, and offering service to higher ones.

The main one used is the ISO OSI model:
	> Application
	> Presentation
	> Session
	> Transport
	> Network
	> Data Link
	> Physical

A protocol, or protocol entity, is a software module that performs one sub-task such as
frame transmission or reception.

Protocol suites ar a number of such software modules that work together to perform all of
the tasks required to enable two hosts communicate.

Protocol architectures or models are models by which we can categorize or view different
protocol layers.

Decisions made by software in each layer does not affect those made in others.

The OSI Model deals with connecting open systems, those open for communications with other
systems regardless of who built them or how they were made.

The prnciples that were applied to arrive at the seven layers are as follows:
	> Each layer was created when a different level of abstraction was required.
	> Each layer performs one well-defined functon with each function chosen carefully
	  to facilitate the development of standardized protocols.
	> The number chosen was sufficient to ensure distinct functions were not lumped
	  together.

The layers of software work together in unison to provide overall solutions to the problems
of communicatng between host computers across complex networks.

Information flows across each of the interfaces, or boundaries, between layers.

Layer 1, Physical: Concerned with transmitting raw bits over a channel.
	> Ensures transmission of 1s and 0s adheres to what is appropriate for the medium.
	> Voltage levels, frequencies, bit durations.
	> Mechanical and electrical designs, timing interfaces, transmission medium.

Layer 2, Data Link: Concerned with successful transmission of data across an individual link.
	> Transforms a raw transmission facility into a data comms channel.
	> Deals with matters like transmission/reception of data frames.
	> Localised unique addressing, unique framing structure, flow/error control.
	> Access to shared channel, dealing with transmission errors.

Layer 3, Network: Concerned with the successful delivery of data between hosts across
complex network infrastructures.
	> Operation of subnets to achieve host-to-host delivery.
	> Primarily deals with matters like packet routing, source to dest across subnets.
	> Creation of globally unique framing structure.
	> Essentially responsible for comms across interconnected heterogeneous networks.
	> MAC addressing, etc.

Layer 4, Transport: True end-to-end layer responsible for reliable delivery of data between
processes on end-host machines, i.e. process-to-process delivery.
	> Purpose is to provide a reliable data transport service to apps.
	> Primarily deals with interfacing with apps for purpose of exchanging data
	  between apps across a network.
	> Multiplexing data streams, data loss, network latency.

We won't cover the rest of the layers until next semester.

The layers work together to provide the complete functionality required to facilitte
communications between two remotely connected host machines regardless of how they connect
to the internet.

Sometimes it is necessary to break up data to meet some size restrictions associated
with some lower layer protocol software.

Data begins on the application layer.
	> On the network layer, it becomes a packet - IP address is added as H3.
	> On the data link layer it becomes a frame - Source and Dest MAC addresses added
	  as H2, and CRC field as T2.
	> On the physical layer it becomes bits - No more framing to be done.

When the data is recieved, it happens on the opposite way.

Bits come in on physical, data link cyclic redundancy checks the frame and looks at the MAC
address, then the network layer looks at the IP address.

If it isn't the correct MAC address, it stops recieving.

If it isn't the destination IP address, it passess it back down the layers to be transported
on across the next LAN.

802.3 or 802.5 LANS can be communicated across. The difference is a differing max frame size.

We have hosts A and B, on two different LANs, which are connected by R1.

Data is passed down from Applcation to Network - Packet created.
	> Source and destination IP are going to be Host A IP, and Host B IP.

Then it is passed down to the Data Link layer - Frame created.
	> The destination MAC address is going to be R1, because that's how it needs to get
	  off the network.
	> The source will be Host A's MAC address.

Then it is passed to Physical, and travels to R1.

R1 takes in the bits, then moves it from Physical to Data Link.

It confirms it has the right MAC address, and then moves it to Network to look at IP.

It sees the destination IP address, and then checks its routing table to see how to move
the packet to the correct destination.

Seeing the next hop address, it knows this is where it must be moved towards.

However, because the two networks are on 802.3 and 802.5 respectively, so it must move
the packet to a piece of extra software that knows how to construct an 802.5 frame.

When moved down to Data Link, the source and destination MAC addresses become R1 and B.

The frame, now an 802.5 frame, is now moved on to the next hop by the Physical layer.

It reaches B, and travels back up through the layers in much the same steps.







































